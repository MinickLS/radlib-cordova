
TSLSimulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00000256  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000032d  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001b3  00000000  00000000  000006f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001c2  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c4  00000000  00000000  00000a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000206  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000022d  00000000  00000000  00000d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000f5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 37       	cpi	r26, 0x7A	; 122
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  8e:	0c 94 29 01 	jmp	0x252	; 0x252 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <usart_init>:
	PORTB |= (1<<0);				// Resistor Pull-up on PB0
	PORTB |= (1<<1);				// Resistor Pull-up on PB1
}

void usart_init(uint16_t baudin, uint32_t clk_speedin)
{
  96:	9c 01       	movw	r18, r24
	uint32_t ubrr = (clk_speedin/16UL)/baudin-1;
  98:	cb 01       	movw	r24, r22
  9a:	ba 01       	movw	r22, r20
  9c:	68 94       	set
  9e:	13 f8       	bld	r1, 3
  a0:	96 95       	lsr	r25
  a2:	87 95       	ror	r24
  a4:	77 95       	ror	r23
  a6:	67 95       	ror	r22
  a8:	16 94       	lsr	r1
  aa:	d1 f7       	brne	.-12     	; 0xa0 <usart_init+0xa>
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	0e 94 07 01 	call	0x20e	; 0x20e <__udivmodsi4>
  b4:	da 01       	movw	r26, r20
  b6:	c9 01       	movw	r24, r18
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	a1 09       	sbc	r26, r1
  bc:	b1 09       	sbc	r27, r1
	UBRR0H = (unsigned char)(ubrr>>8);
  be:	49 2f       	mov	r20, r25
  c0:	5a 2f       	mov	r21, r26
  c2:	6b 2f       	mov	r22, r27
  c4:	77 27       	eor	r23, r23
  c6:	40 93 c5 00 	sts	0x00C5, r20
	UBRR0L = (unsigned char)ubrr;
  ca:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0A &= ~(1<<U2X0);
  da:	e0 ec       	ldi	r30, 0xC0	; 192
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <init>:
	return 0;
}

void init()
{
	usart_init(9600, 16000000);	// baud rate is 9600
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	54 e2       	ldi	r21, 0x24	; 36
  ea:	64 ef       	ldi	r22, 0xF4	; 244
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	80 e8       	ldi	r24, 0x80	; 128
  f0:	95 e2       	ldi	r25, 0x25	; 37
  f2:	0e 94 4b 00 	call	0x96	; 0x96 <usart_init>
	DDRB = 0x00;				// want PB0/B1 to be inputs
  f6:	14 b8       	out	0x04, r1	; 4
	PORTB |= (1<<0);				// Resistor Pull-up on PB0
  f8:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<1);				// Resistor Pull-up on PB1
  fa:	29 9a       	sbi	0x05, 1	; 5
  fc:	08 95       	ret

000000fe <usart_send>:
}

void usart_send(uint8_t data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  fe:	e0 ec       	ldi	r30, 0xC0	; 192
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	90 81       	ld	r25, Z
 104:	95 ff       	sbrs	r25, 5
 106:	fd cf       	rjmp	.-6      	; 0x102 <usart_send+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 108:	80 93 c6 00 	sts	0x00C6, r24
 10c:	08 95       	ret

0000010e <printu>:
}

void printu(char string[], uint8_t length)	// Perhaps by not using the String library we save memory....?
{
 10e:	ef 92       	push	r14
 110:	ff 92       	push	r15
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
	int index;
	
	for (index = 0; index < length; index++)
 11a:	e6 2e       	mov	r14, r22
 11c:	f1 2c       	mov	r15, r1
 11e:	1e 14       	cp	r1, r14
 120:	1f 04       	cpc	r1, r15
 122:	6c f4       	brge	.+26     	; 0x13e <printu+0x30>
 124:	08 2f       	mov	r16, r24
 126:	19 2f       	mov	r17, r25
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		usart_send(string[index]);
 12c:	f8 01       	movw	r30, r16
 12e:	81 91       	ld	r24, Z+
 130:	8f 01       	movw	r16, r30
 132:	0e 94 7f 00 	call	0xfe	; 0xfe <usart_send>

void printu(char string[], uint8_t length)	// Perhaps by not using the String library we save memory....?
{
	int index;
	
	for (index = 0; index < length; index++)
 136:	21 96       	adiw	r28, 0x01	; 1
 138:	ce 15       	cp	r28, r14
 13a:	df 05       	cpc	r29, r15
 13c:	bc f3       	brlt	.-18     	; 0x12c <printu+0x1e>
	{
		usart_send(string[index]);
	}
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	ff 90       	pop	r15
 148:	ef 90       	pop	r14
 14a:	08 95       	ret

0000014c <printRead>:

void printRead()
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	cc 54       	subi	r28, 0x4C	; 76
 156:	d1 09       	sbc	r29, r1
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
	char read[] = {'C', 'S', ':', ' ', '.', 'i', 'v','\n','\r',
 162:	8c e4       	ldi	r24, 0x4C	; 76
 164:	e0 e0       	ldi	r30, 0x00	; 0
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	de 01       	movw	r26, r28
 16a:	11 96       	adiw	r26, 0x01	; 1
 16c:	01 90       	ld	r0, Z+
 16e:	0d 92       	st	X+, r0
 170:	8a 95       	dec	r24
 172:	e1 f7       	brne	.-8      	; 0x16c <printRead+0x20>
				   'E', 'P', ':', ' ', 'E', '2', '0', '0', '3', '2', '6', 'A',
				   '7', '0', '9', '2', '0', 'F', 'B', '1', '1', '1', '6', '9',
				   '3', '8', '3', 'E', '\n', '\r',
				   'O', 'K', ':', '\n', '\r', '\n', '\r'};
				   
	printu(read, 76);
 174:	6c e4       	ldi	r22, 0x4C	; 76
 176:	ce 01       	movw	r24, r28
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	0e 94 87 00 	call	0x10e	; 0x10e <printu>
}
 17e:	c4 5b       	subi	r28, 0xB4	; 180
 180:	df 4f       	sbci	r29, 0xFF	; 255
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <printNoRead>:

void printNoRead()
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	ad 97       	sbiw	r28, 0x2d	; 45
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
	char noRead[] = {'C', 'S', ':', ' ', '.', 'i', 'v','\n','\r',
 1a6:	8d e2       	ldi	r24, 0x2D	; 45
 1a8:	ec e4       	ldi	r30, 0x4C	; 76
 1aa:	f1 e0       	ldi	r31, 0x01	; 1
 1ac:	de 01       	movw	r26, r28
 1ae:	11 96       	adiw	r26, 0x01	; 1
 1b0:	01 90       	ld	r0, Z+
 1b2:	0d 92       	st	X+, r0
 1b4:	8a 95       	dec	r24
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <printNoRead+0x1e>
					 'M', 'E', ':', ' ', 'N', 'o', ' ', 'T', 'r', 'a', 'n', 's',
					 'p', 'o', 'n', 'd', 'e', 'r', ' ', 'f', 'o', 'u', 'n', 'd',
					 '\n', '\r',
					 'E', 'R', ':', '0', '0', '5', '\n', '\r', '\n', '\r'};
		
	printu(noRead, 45);
 1b8:	6d e2       	ldi	r22, 0x2D	; 45
 1ba:	ce 01       	movw	r24, r28
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	0e 94 87 00 	call	0x10e	; 0x10e <printu>
 1c2:	ad 96       	adiw	r28, 0x2d	; 45
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <main>:
void printRead();
void printNoRead();

int main(void)
{
	init();
 1d4:	0e 94 73 00 	call	0xe6	; 0xe6 <init>
	
    while(1)
    {
		if(!(PINB & (1<<0)))
 1d8:	18 99       	sbic	0x03, 0	; 3
 1da:	0b c0       	rjmp	.+22     	; 0x1f2 <main+0x1e>
		{
			printRead();
 1dc:	0e 94 a6 00 	call	0x14c	; 0x14c <printRead>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	83 ec       	ldi	r24, 0xC3	; 195
 1e4:	99 e0       	ldi	r25, 0x09	; 9
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x12>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x1c>
 1f0:	00 00       	nop
			_delay_ms(200);
		}
		
		if(!(PINB & (1<<1)))
 1f2:	19 99       	sbic	0x03, 1	; 3
 1f4:	f1 cf       	rjmp	.-30     	; 0x1d8 <main+0x4>
		{
			printNoRead();
 1f6:	0e 94 c9 00 	call	0x192	; 0x192 <printNoRead>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	83 ec       	ldi	r24, 0xC3	; 195
 1fe:	99 e0       	ldi	r25, 0x09	; 9
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x2c>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x36>
 20a:	00 00       	nop
 20c:	e5 cf       	rjmp	.-54     	; 0x1d8 <main+0x4>

0000020e <__udivmodsi4>:
 20e:	a1 e2       	ldi	r26, 0x21	; 33
 210:	1a 2e       	mov	r1, r26
 212:	aa 1b       	sub	r26, r26
 214:	bb 1b       	sub	r27, r27
 216:	fd 01       	movw	r30, r26
 218:	0d c0       	rjmp	.+26     	; 0x234 <__udivmodsi4_ep>

0000021a <__udivmodsi4_loop>:
 21a:	aa 1f       	adc	r26, r26
 21c:	bb 1f       	adc	r27, r27
 21e:	ee 1f       	adc	r30, r30
 220:	ff 1f       	adc	r31, r31
 222:	a2 17       	cp	r26, r18
 224:	b3 07       	cpc	r27, r19
 226:	e4 07       	cpc	r30, r20
 228:	f5 07       	cpc	r31, r21
 22a:	20 f0       	brcs	.+8      	; 0x234 <__udivmodsi4_ep>
 22c:	a2 1b       	sub	r26, r18
 22e:	b3 0b       	sbc	r27, r19
 230:	e4 0b       	sbc	r30, r20
 232:	f5 0b       	sbc	r31, r21

00000234 <__udivmodsi4_ep>:
 234:	66 1f       	adc	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	88 1f       	adc	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	1a 94       	dec	r1
 23e:	69 f7       	brne	.-38     	; 0x21a <__udivmodsi4_loop>
 240:	60 95       	com	r22
 242:	70 95       	com	r23
 244:	80 95       	com	r24
 246:	90 95       	com	r25
 248:	9b 01       	movw	r18, r22
 24a:	ac 01       	movw	r20, r24
 24c:	bd 01       	movw	r22, r26
 24e:	cf 01       	movw	r24, r30
 250:	08 95       	ret

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
